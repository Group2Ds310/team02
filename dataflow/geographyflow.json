{
	"name": "geographyflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ParquetAZCountry",
						"type": "DatasetReference"
					},
					"name": "AzureCountry"
				},
				{
					"dataset": {
						"referenceName": "ParquetVMCountry",
						"type": "DatasetReference"
					},
					"name": "VMCountry"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ODSGeography",
						"type": "DatasetReference"
					},
					"name": "geographysink"
				}
			],
			"transformations": [
				{
					"name": "geoselection"
				},
				{
					"name": "countryinnerjoin"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Country as string,",
				"          CountryCode as string,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     partitionBy('hash', 1)) ~> AzureCountry",
				"source(output(",
				"          Country as string,",
				"          CountryCode as string,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     partitionBy('hash', 1)) ~> VMCountry",
				"countryinnerjoin select(mapColumn(",
				"          Country = AzureCountry@Country,",
				"          CountryCode = AzureCountry@CountryCode,",
				"          Latitude = AzureCountry@Latitude,",
				"          Longitude = AzureCountry@Longitude,",
				"          Country = VMCountry@Country,",
				"          CountryCode = VMCountry@CountryCode,",
				"          Latitude = VMCountry@Latitude,",
				"          Longitude = VMCountry@Longitude",
				"     ),",
				"     partitionBy('hash', 1),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> geoselection",
				"AzureCountry, VMCountry join(AzureCountry@CountryCode == VMCountry@CountryCode,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> countryinnerjoin",
				"geoselection sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['geography.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> geographysink"
			]
		}
	}
}